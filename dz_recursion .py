"""
Данный модуль содержит следующие функции:
1)summd Функция принимает один аргумент в виде натурального числа и считает его сумму с помощью рекурсии
2)invert_natur Функция принимает один аргуент в виде натурального числа инвертирует его и выводит обратно
3)check_number Функция принимает два аргумента и определяет является ли он простым в зависимости от результата выводит True или False
"""

#1
"""
Дано натуральное число. Вычислите сумму его цифр
"""
def summd(natur):
    """
    Функция принимает один аргумент в виде натурального числа
    и считает его сумму с помощью рекурсии 
    после выводит рультат 
    """
    if natur < 10 :
        return natur
    return summd(natur // 10) + natur % 10

#2
"""
Дано натуральное число. Записать число в обратном порядке
"""
def invert_natur(natur):
    """
    Функция принимает один аргуент в виде натурального числа
    инвертирует его и выводит обратно
    """
    if natur == 0 :
        return ""
    else:
        return str(natur % 10) + invert_natur(natur // 10)

#3
"""
Проверить число на простоту
"""
def check_number(number, delitel=2):
    """
    Функция принимает два аргумента и определяет является ли он простым
    в зависимости от результата выводит True или False
    
    если второй аргумент не был введен то он по умолчанию равен 2
    """
    
    if number < delitel:      #если число меньше двух то оно не простое
        return False
    if delitel * delitel > number:       #если 2 в квадрате больше проверяемого числа то это обозначает что число является простым
        return True
    if number % delitel == 0 :        #если число делится на 2 без остатка то оно является простым
        return False
    return check_number(number, delitel + 1)
#4
"""
4.	Написать функцию,
которая будет принимать натуральное число n и возвращать n-ую строку треугольника Паскаля
"""
def pascal_triangle(n):
    """
    Функция приимает один n аргумент(int) и выводит n-ую строку треугольника паскаля 
    """
    if n == 0:
        return [1]
    
    previous_row = pascal_triangle(n - 1)   # Рекурсивно получаем предыдущую строку
    current_row = [1]
    for i in range(len(previous_row) - 1):
        current_row.append(previous_row[i] + previous_row[i + 1])
    current_row.append(1)  # Последний элемент всегда 1
    return current_row


if __name__ == "__main__":

    #1
    print (summd(123))
    #2
    print(invert_natur(123))
    #3
    if check_number(15,2):
        print('Число является простым')
    else:
        print('Число не является простым')
    #4
    n = 5
    print(f"{n}-я строка треугольника Паскаля: {pascal_triangle(n)}")